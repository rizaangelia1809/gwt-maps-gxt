 -----
 Getting Started
 -----
 Claudius Hauptmann
 -----
 Date
 -----

~~ http://maven.apache.org/doxia/references/apt-format.html

Getting Started

 This page describes the first steps using the gwt-maps-gxt library assuming you have already got a well running gwt-application in your IDE.
 
 Additional information about using Google Maps with the Google Web Toolkit and Eclipse can be found in these two of my postings:
 
  * {{{http://claudiushauptmann.com/tutorial-google-maps-with-java-gwt-and-eclipse.html} Tutorial: Google Maps with Java, GWT and Eclipse}} 
 
  * {{{http://claudiushauptmann.com/tutorial-gwt-maven-and-eclipse-with-m2eclipse.html} Tutorial: GWT, Maven and Eclipse with M2Eclipse}}
  
 The source code of the {{{http://gwt-maps-gxt.appspot.com/} demo}} can be found {{{http://code.google.com/p/gwt-maps-gxt/source/browse/#svn/trunk/gwt-maps-gxt-parent/gwt-maps-gxt-sample} here}}.  

*Step 1: Add gwt-maps-gxt, gxt and maps to your class pass

 This can be done either in your IDE, your ant script or when using maven in your pom this way:
 
-----
        <dependencies>
                <dependency>
                        <groupId>com.google.gwt</groupId>
                        <artifactId>gwt-user</artifactId>
                        <version>2.0.2</version>
                </dependency>
                ...
                <dependency>
                        <groupId>com.extjs</groupId>
                        <artifactId>gxt</artifactId>
                        <version>2.1.1</version>
                </dependency>
                <dependency>
                        <groupId>com.google.gwt.google-apis</groupId>
                        <artifactId>gwt-maps</artifactId>
                        <version>1.0.4</version>
                </dependency>
                <dependency>
                        <groupId>com.claudiushauptmann</groupId>
                        <artifactId>gwt-maps-gxt</artifactId>
                        <version>1.0.0.Beta5</version>
                </dependency>
        </dependencies>
-----
 
 
*Step 2: Add gwt-maps-gxt, gxt and maps to you GWT module

 You have to tell your GWT compiler to use the GWT modules within the libraries added in step 1.
 Add the module references to your .gwt.xml file.
  
-----
<module>
        <!-- Inherit the core Web Toolkit stuff. -->
        <inherits name='com.google.gwt.user.User' />
        
        ...

        <!-- Include Google Maps and Inherit the Wrapper Module -->
        <script src="http://maps.google.com/maps?gwt=1&amp;file=api&amp;v=2.148&amp;key=ABQIAAAA_y00Oj9-eREyM3Qdy3CGuRQNjo7FUnOcFIz3NZBPRruID_RiZBRghfKtWUOTve6QjGOlWQeJu9vvtQ" />
        <inherits name="com.google.gwt.maps.GoogleMaps" />

        <!-- Inherit the GXT-Module -->
        <inherits name="com.extjs.gxt.ui.GXT" />

        <!-- Inherit the gwt-maps-gxt Module -->
        <inherits name="com.claudiushauptmann.gwt.maps.gxt.GwtMapsGxt" />

        <!-- Specify the app entry point class.                   -->
        <entry-point class='com.claudiushauptmann.gwt.maps.gxt.samples.client.OverlayEditor' />
</module>
-----


*Step 3: Instantiate a Google Maps map

-----
public class OverlayEditor implements EntryPoint {
        private MapWidget mapWidget;

        public void onModuleLoad() {
                // Map
                mapWidget = new MapWidget();
                mapWidget.setCenter(LatLng.newInstance(48.136559, 11.576318), 13);
                mapWidget.setWidth("100%");
                mapWidget.setHeight("100%");
                mapWidget.addControl(new LargeMapControl());
                mapWidget.setContinuousZoom(true);
                mapWidget.setScrollWheelZoomEnabled(true);
                RootPanel.get().add(mapWidget);
        }
}
-----


*Step 4: Create a MapMenuProvider and MenuItemHandlers (e.g. as inner classes)

 The MenuItemHandler are using classes we create some steps later.

-----
public class OverlayEditor implements EntryPoint {

        ...

        private Menu mapMenu;
        private MenuItem addMarkerMenuItem;
        private AddMarkerMenuItemHandler addMarkerMenuItemHandler;
        private AddPolygonMenuItemHandler addPolygonMenuItemHandler;
        private MenuItem addPolygonMenuItem;
        private AddPolylineMenuItemHandler addPolylineMenuItemHandler;
        private MenuItem addPolylineMenuItem;

        ...

        private class MapMenuProvider implements MenuProvider {
                public Menu getMenu() {
                        if (mapMenu == null) {
                                mapMenu = new Menu();

                                addMarkerMenuItem = new MenuItem();
                                addMarkerMenuItem.setText("add Marker");
                                addMarkerMenuItemHandler = new AddMarkerMenuItemHandler();
                                addMarkerMenuItem.addSelectionListener(addMarkerMenuItemHandler);
                                mapMenu.add(addMarkerMenuItem);

                                addPolygonMenuItem = new MenuItem();
                                addPolygonMenuItem.setText("add Polygon");
                                addPolygonMenuItemHandler = new AddPolygonMenuItemHandler();
                                addPolygonMenuItem.addSelectionListener(addPolygonMenuItemHandler);
                                mapMenu.add(addPolygonMenuItem);

                                addPolylineMenuItem = new MenuItem();
                                addPolylineMenuItem.setText("add Polyline");
                                addPolylineMenuItemHandler = new AddPolylineMenuItemHandler();
                                addPolylineMenuItem.addSelectionListener(addPolylineMenuItemHandler);
                                mapMenu.add(addPolylineMenuItem);
                        }

                        return mapMenu;
                }
        }

        private class AddMarkerMenuItemHandler extends SelectionListener<MenuEvent> {

                @Override
                public void componentSelected(MenuEvent me) {
                        MarkerOptions mo = MarkerOptions.newInstance();
                        mo.setClickable(true);
                        mo.setDraggable(true);
                        Marker newMarker = new Marker(mapGxtController.getRightClickedLatLng(), mo);
                        mapWidget.addOverlay(newMarker);

                        new MyMarkerEditController(mapGxtController, newMarker, "Marker",
                                        "This is a new marker.");
                }
        }

        private class AddPolylineMenuItemHandler extends
                        SelectionListener<MenuEvent> {

                @Override
                public void componentSelected(MenuEvent ce) {
                        LatLng[] llline = new LatLng[1];
                        llline[0] = mapGxtController.getRightClickedLatLng();
                        PolylineOptions plo = PolylineOptions.newInstance(true, false);
                        Polyline line = new Polyline(llline, "#FF0000", 2, 1.0, plo);
                        mapWidget.addOverlay(line);
                        line.setDrawingEnabled();

                        new MyPolylineEditController(mapGxtController, line, "Polyline",
                                        "This is a new polyline.");
                }
        }

        private class AddPolygonMenuItemHandler extends
                        SelectionListener<MenuEvent> {

                @Override
                public void componentSelected(MenuEvent me) {
                        LatLng[] llpolygon = new LatLng[1];
                        llpolygon[0] = mapGxtController.getRightClickedLatLng();
                        PolygonOptions pgo = PolygonOptions.newInstance(true);
                        Polygon polygon = new Polygon(llpolygon, "#0000FF", 2, 1.0,
                                        "#0000FF", 0.3, pgo);
                        mapWidget.addOverlay(polygon);
                        polygon.setDrawingEnabled();

                        new MyPolygonEditController(mapGxtController, polygon, "Polygon",
                                        "This is a new polygon.");

                }
        }
}
-----



*Step 5: Instantiate a MapGXTController and attach MenuItemHandlers

-----
public class OverlayEditor implements EntryPoint {
        
        ...
        
        private MapGXTController mapGxtController;
        private MapMenuProvider mapMenuProvider;
        
        ...

        public void onModuleLoad() {
                ...
                
                // MapController
                MapGXTController mapGxtController;
                mapGxtController = new MapGXTController(mapWidget);
                mapMenuProvider = new MapMenuProvider();
                mapGxtController.setMenuProvider(mapMenuProvider);
        }
}
-----


*Step 6: Create Controllers for Overlays that provide a MenuItemHandler and a TipProvider

 Only the Controller for Markers is shown here. Other Controllers can be found in the {{{http://code.google.com/p/gwt-maps-gxt/source/browse/#svn/trunk/gwt-maps-gxt-parent/gwt-maps-gxt-sample} source code of this example}}.

-----
public class MyMarkerEditController {
        private MapGXTController mapGxtController;
        private Marker marker;
        private MarkerGXTController markerGxtController;

        private MyTipProvider myTipProvider;
        private DefaultOverlayTip overlayTip;
        private String tipTitle;
        private String tipText;

        private MarkerMenuProvider markerMenuProvider;
        private Menu markerMenu;
        private MenuItem markerDeleteMenuItem;
        private MarkerDeleteMenuItemHandler markerDeleteMenuItemHandler;

        public MyMarkerEditController(MapGXTController mapGxtController,
                        Marker marker, String tipTitle, String tipText) {
                this.marker = marker;
                this.mapGxtController = mapGxtController;
                this.tipTitle = tipTitle;
                this.tipText = tipText;

                markerGxtController = new MarkerGXTController(mapGxtController, marker);

                myTipProvider = new MyTipProvider();
                markerGxtController.setTipProvider(myTipProvider);

                markerMenuProvider = new MarkerMenuProvider();
                markerGxtController.setMenuProvider(markerMenuProvider);
        }

        private class MyTipProvider implements TipProvider {
                public Tip getTip() {
                        if (overlayTip == null) {
                                overlayTip = new DefaultOverlayTip();
                                overlayTip.setTitle(tipTitle);
                                overlayTip.setDescription("loading...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");

                                new Timer() {
                                        @Override
                                        public void run() {
                                                overlayTip = new DefaultOverlayTip();
                                                overlayTip.setTitle(tipTitle);
                                                overlayTip.setDescription(tipText);
                                                markerGxtController.refreshTip();
                                        }
                                }.schedule(1500);
                        }

                        return overlayTip;
                }
        }

        private class MarkerMenuProvider implements MenuProvider {
                public Menu getMenu() {
                        if (markerMenu == null) {
                                markerMenu = new Menu();

                                markerDeleteMenuItem = new MenuItem();
                                markerDeleteMenuItem.setText("Delete Marker");
                                markerDeleteMenuItemHandler = new MarkerDeleteMenuItemHandler();
                                markerDeleteMenuItem.addSelectionListener(markerDeleteMenuItemHandler);
                                markerMenu.add(markerDeleteMenuItem);
                        }

                        return markerMenu;
                }
        }

        private class MarkerDeleteMenuItemHandler extends
                        SelectionListener<MenuEvent> {

                @Override
                public void componentSelected(MenuEvent me) {
                        mapGxtController.getMapWidget().removeOverlay(marker);
                }

        }
}
-----


*Step 7: Add Overlays to the map

-----
public class OverlayEditor implements EntryPoint {
        
        ...

        public void onModuleLoad() {
                ...
                
                // Marker
                MarkerOptions mo = MarkerOptions.newInstance();
                mo.setClickable(true);
                mo.setDraggable(true);
                Marker marker = new Marker(mapWidget.getCenter(), mo);
                mapWidget.addOverlay(marker);
                new MyMarkerEditController(
                                mapGxtController,
                                marker,
                                "Marienplatz",
                                "Marienplatz is a central square in the"
                                                + " city center of Munich, Germany since 1158.<br/>"
                                                + " In the Middle Ages markets and tournaments were held in this"
                                                + " city square. The Glockenspiel in the new city hall was inspired"
                                                + " by these tournaments, and draws millions of tourists a year.");
        }
}
-----
